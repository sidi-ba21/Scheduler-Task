// scheduler component 
import { Component, OnInit } from '@angular/core';
import { DataService } from './data.service';
import { DayPilot } from 'daypilot-pro-angular';

@Component({
  selector: 'scheduler-component',
  // ... template et styles ...
})
export class SchedulerComponent implements OnInit {

  resources: DayPilot.ResourceData[] = [];
  events: DayPilot.EventData[] = [];

  constructor(private dataService: DataService) { }

  ngOnInit(): void {
    // Récupérer les utilisateurs
    this.dataService.getUsers().subscribe(users => {
      // Créer des ressources à partir des utilisateurs
      this.resources = users.map(user => ({
        name: user.username,
        id: user.id.toString()
      }));
    });

    // Récupérer les événements
    this.dataService.getEvents().subscribe(events => {
      // Mettre à jour les événements
      this.events = events.map(event => ({
        id: event.id.toString(),
        resource: event.user_id.toString(),
        start: event.start,
        end: event.end,
        text: event.title,
        tags: {
          backColor: event.backColor,
          description: event.description
        }
      }));
    });
  }
}

// data service 

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DataService {

  constructor(private http: HttpClient) { }

  getUsers(): Observable<any[]> {
    return this.http.get<any[]>('http://localhost:8080/get-users');
  }

  getEvents(): Observable<any[]> {
    return this.http.get<any[]>('http://localhost:8080/get-events');
  }
}

import { Component } from '@angular/core';

@Component({
  selector: 'app-votre-composant',
  templateUrl: './votre-composant.component.html',
  styleUrls: ['./votre-composant.component.css']
})
export class VotreComposantComponent {

  afficherTag(event: MouseEvent): void {
    const target = event.target as HTMLSelectElement;
    const positionClic = {
      x: event.clientX,
      y: event.clientY
    };

    const optionIndex = target.selectedIndex;
    const selectedOption = target.options[optionIndex].text;

    console.log(`Option sélectionnée: ${selectedOption}`);
    console.log(`Position du clic - X: ${positionClic.x}, Y: ${positionClic.y}`);
    // Vous pouvez maintenant utiliser la valeur de l'option et la position du clic comme vous le souhaitez.
  }
}



// html
<div (click)="afficherSelect($event)" class="click-area">
  Click here to select an option
</div>

<div *ngIf="selectVisible" [style.left.px]="positionClic.x" [style.top.px]="positionClic.y" class="select-container">
  <select (change)="onOptionSelected($event)">
    <option value="beginner">Beginner</option>
    <option value="amateur">Amateur</option>
    <option value="pro">Pro</option>
    <option value="star">Star</option>
  </select>
</div>

<div *ngIf="selectedOption">
  You selected: {{ selectedOption }}
</div>


// ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-votre-composant',
  templateUrl: './votre-composant.component.html',
  styleUrls: ['./votre-composant.component.css']
})
export class VotreComposantComponent {

  selectVisible: boolean = false;
  positionClic: { x: number, y: number } = { x: 0, y: 0 };
  selectedOption: string = '';

  afficherSelect(event: MouseEvent): void {
    this.positionClic = {
      x: event.clientX,
      y: event.clientY
    };

    this.selectVisible = true;
  }

  onOptionSelected(event: Event): void {
    const target = event.target as HTMLSelectElement;
    this.selectedOption = target.value;
    this.selectVisible = false;
  }
}



// css

.click-area {
  background-color: #f1f1f1;
  padding: 20px;
  cursor: pointer;
  margin-bottom: 10px;
}

.select-container {
  position: absolute;
  background-color: #fff;
  border: 1px solid #ccc;
  padding: 10px;
  border-radius: 5px;
}


// pos
// Écoutez l'événement de clic de la souris sur votre élément DayPilot
daypilotScheduler.onTimeRangeSelected = function(args) {
    var event = args.domEvent;
    
    // Récupérez la position de la souris à l'intérieur de votre élément DayPilot
    var offsetX = event.offsetX || (event.pageX - event.target.offsetLeft);
    var offsetY = event.offsetY || (event.pageY - event.target.offsetTop);
    
    // Ajoutez la position de votre élément DayPilot à la position de la souris relative à DayPilot
    var absoluteX = args.left + offsetX;
    var absoluteY = args.top + offsetY;
    
    // Maintenant, absoluteX et absoluteY contiennent les coordonnées de la souris sur la page
    console.log("Position de la souris sur la page - X: " + absoluteX + ", Y: " + absoluteY);
};

